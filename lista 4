#Questão 1

class TreeNode:
    def __init__(self, val=0):
        self.val = val
        self.left = None
        self.right = None

# Função para criar uma árvore binária de busca (BST) a partir de uma lista de nós
def create_tree(nodes):
    if not nodes:
        return None
    
    root = TreeNode(nodes[0])
    for n in nodes[1:]:
        insert_node(root, n)

    return root
    
def insert_node(root, value):
    if value < root.val:
        if root.left is None:
            root.left = TreeNode(value)
        else:
            insert_node(root.left, value)
    elif value > root.val:
        if root.right is None:
            root.right = TreeNode(value)
        else:
            insert_node(root.right, value)
    else:
        print(f"Valor duplicado {value} encontrado. BST não pode ter valores duplicados.")



def altura(no):
    if no is None:
        return 0
    altura_esquerda = altura(no.left)
    altura_direita = altura(no.right)

    if altura_esquerda == -1 or altura_direita == -1:
        return -1
    
    if abs(altura_esquerda - altura_direita) > 1:
        return -1

    return max(altura_esquerda, altura_direita) + 1

def is_balanceada(raiz):
    return altura(raiz) != -1

# Exemplo de uso
nodes = [3, 1, 4, 2, 0, -1, 5 ]  # A lista de nós para criar a árvore

raiz = create_tree(nodes)

print(is_balanceada(raiz))


#Questão 2

import random

class Pilha_lista:
    def __init__(self, data=None) -> None:
        if data is None:
            self._data = []
        else:
            self._data = data

    def pop(self):
        if self.is_empty():
            raise IndexError("pop from empty stack")  # Levanta um erro se a pilha estiver vazia

        k = random.randint(0, len(self._data) - 1)
        self._data[k], self._data[-1] = self._data[-1], self._data[k]
        return self._data.pop()
    
    def push(self, element):
        self._data.append(element)
    
    def is_empty(self):
        return len(self._data) == 0
    
    def size(self):
        return len(self._data)

# Testando a classe
pilha = Pilha_lista([1, 2, 4, 5, 6])
elemento_removido = pilha.pop()
print(f'Elemento removido: {elemento_removido}')
print(f'Estado da pilha: {pilha._data}')

#Quetsão 4

import numpy as np
import scipy.stats as stats

def gerar_pontos(n, distribuicao):
    if distribuicao == 'uniforme':
        x = stats.uniform.rvs(-1, 2, size=n)  # Intervalo [-1, 1] com largura 2
        y = stats.uniform.rvs(-1, 2, size=n)
    elif distribuicao == 'normal':
        x = stats.norm.rvs(loc=0, scale=0.5, size=n)
        y = stats.norm.rvs(loc=0, scale=0.5, size=n)
    elif distribuicao == 't-student':
        x = stats.t.rvs(df=1, loc=0, scale=0.5, size=n)
        y = stats.t.rvs(df=1, loc=0, scale=0.5, size=n)
    else:
        raise ValueError("Distribuição não reconhecida. Escolha 'uniforme', 'normal' ou 't-student'.")

    return np.array(list(zip(x, y)))


pontos=gerar_pontos(9, "uniforme")

def fecho_convexo(pontos):
  poligono=ConvexHull(pontos)
  return pontos[poligono.vertices]

fecho_convexo(pontos)
